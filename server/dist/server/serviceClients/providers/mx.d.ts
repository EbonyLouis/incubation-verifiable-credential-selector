import type { Connection, CreateConnectionRequest, Credential, Institution, Institutions, ProviderApiClient, UpdateConnectionRequest } from '../../../shared/contract';
export declare class MxApi implements ProviderApiClient {
    apiClient: {
        aggregateMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        checkBalances(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        createCategory(userGuid: string, categoryCreateRequestBody: import("../mxClient").CategoryCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoryResponseBody>;
        createManagedAccount(memberGuid: string, userGuid: string, managedAccountCreateRequestBody: import("../mxClient").ManagedAccountCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountResponseBody>;
        createManagedMember(userGuid: string, managedMemberCreateRequestBody: import("../mxClient").ManagedMemberCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        createManagedTransaction(accountGuid: string, memberGuid: string, userGuid: string, managedTransactionCreateRequestBody: import("../mxClient").ManagedTransactionCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionResponseBody>;
        createMember(userGuid: string, memberCreateRequestBody: import("../mxClient").MemberCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        createTag(userGuid: string, tagCreateRequestBody: import("../mxClient").TagCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TagResponseBody>;
        createTagging(userGuid: string, taggingCreateRequestBody: import("../mxClient").TaggingCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TaggingResponseBody>;
        createTransactionRule(userGuid: string, transactionRuleCreateRequestBody: import("../mxClient").TransactionRuleCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionRuleResponseBody>;
        createUser(userCreateRequestBody: import("../mxClient").UserCreateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").UserResponseBody>;
        deleteCategory(categoryGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteManagedAccount(accountGuid: string, memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteManagedMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteManagedTransaction(accountGuid: string, memberGuid: string, transactionGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteTag(tagGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteTagging(taggingGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteTransactionRule(transactionRuleGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        deleteUser(userGuid: string, options?: any): import("axios").AxiosPromise<void>;
        downloadStatementPDF(memberGuid: string, statementGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<any>;
        enhanceTransactions(enhanceTransactionsRequestBody: import("../mxClient").EnhanceTransactionsRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").EnhanceTransactionsResponseBody>;
        extendHistory(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        fetchStatements(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        identifyMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        listAccountNumbersByAccount(accountGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountNumbersResponseBody>;
        listAccountNumbersByMember(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountNumbersResponseBody>;
        listAccountOwnersByMember(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountOwnersResponseBody>;
        listCategories(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoriesResponseBody>;
        listDefaultCategories(page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoriesResponseBody>;
        listDefaultCategoriesByUser(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoriesResponseBody>;
        listFavoriteInstitutions(page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").InstitutionsResponseBody>;
        listHoldings(userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").HoldingsResponseBody>;
        listHoldingsByAccount(accountGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").HoldingsResponseBody>;
        listHoldingsByMember(memberGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").HoldingsResponseBody>;
        listInstitutionCredentials(institutionCode: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").CredentialsResponseBody>;
        listInstitutions(name?: string, page?: number, recordsPerPage?: number, supportsAccountIdentification?: boolean, supportsAccountStatement?: boolean, supportsAccountVerification?: boolean, supportsTransactionHistory?: boolean, options?: any): import("axios").AxiosPromise<import("../mxClient").InstitutionsResponseBody>;
        listManagedAccounts(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountsResponseBody>;
        listManagedInstitutions(page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").InstitutionsResponseBody>;
        listManagedMembers(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").MembersResponseBody>;
        listManagedTransactions(accountGuid: string, memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionsResponseBody>;
        listMemberChallenges(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").ChallengesResponseBody>;
        listMemberCredentials(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").CredentialsResponseBody>;
        listMembers(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").MembersResponseBody>;
        listMerchants(page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").MerchantsResponseBody>;
        listStatementsByMember(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").StatementsResponseBody>;
        listTaggings(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").TaggingsResponseBody>;
        listTags(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").TagsResponseBody>;
        listTransactionRules(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionRulesResponseBody>;
        listTransactions(userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionsResponseBody>;
        listTransactionsByAccount(accountGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionsResponseBody>;
        listTransactionsByMember(memberGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionsResponseBody>;
        listTransactionsByTag(tagGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionsResponseBody>;
        listUserAccounts(userGuid: string, page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountsResponseBody>;
        listUsers(page?: number, recordsPerPage?: number, options?: any): import("axios").AxiosPromise<import("../mxClient").UsersResponseBody>;
        readAccount(accountGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountResponseBody>;
        readCategory(categoryGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoryResponseBody>;
        readDefaultCategory(categoryGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoryResponseBody>;
        readHolding(holdingGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").HoldingResponseBody>;
        readInstitution(institutionCode: string, options?: any): import("axios").AxiosPromise<import("../mxClient").InstitutionResponseBody>;
        readManagedAccount(accountGuid: string, memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountResponseBody>;
        readManagedMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        readManagedTransaction(accountGuid: string, memberGuid: string, transactionGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionResponseBody>;
        readMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        readMemberStatus(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberStatusResponseBody>;
        readMerchant(merchantGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MerchantResponseBody>;
        readMerchantLocation(merchantLocationGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MerchantLocationResponseBody>;
        readStatementByMember(memberGuid: string, statementGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").StatementResponseBody>;
        readTag(tagGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TagResponseBody>;
        readTagging(taggingGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TaggingResponseBody>;
        readTransaction(transactionGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionResponseBody>;
        readTransactionRule(transactionRuleGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionRuleResponseBody>;
        readUser(userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").UserResponseBody>;
        requestConnectWidgetURL(userGuid: string, connectWidgetRequestBody: import("../mxClient").ConnectWidgetRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").ConnectWidgetResponseBody>;
        requestOAuthWindowURI(memberGuid: string, userGuid: string, clientRedirectUrl?: string, referralSource?: string, skipAggregation?: boolean, uiMessageWebviewUrlScheme?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").OAuthWindowResponseBody>;
        requestWidgetURL(userGuid: string, widgetRequestBody: import("../mxClient").WidgetRequestBody, acceptLanguage?: string, options?: any): import("axios").AxiosPromise<import("../mxClient").WidgetResponseBody>;
        resumeAggregation(memberGuid: string, userGuid: string, memberResumeRequestBody: import("../mxClient").MemberResumeRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        updateAccountByMember(accountGuid: string, memberGuid: string, userGuid: string, accountUpdateRequestBody: import("../mxClient").AccountUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountResponseBody>;
        updateCategory(categoryGuid: string, userGuid: string, categoryUpdateRequestBody: import("../mxClient").CategoryUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").CategoryResponseBody>;
        updateManagedAccount(accountGuid: string, memberGuid: string, userGuid: string, managedAccountUpdateRequestBody: import("../mxClient").ManagedAccountUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").AccountResponseBody>;
        updateManagedMember(memberGuid: string, userGuid: string, managedMemberUpdateRequestBody: import("../mxClient").ManagedMemberUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        updateManagedTransaction(accountGuid: string, memberGuid: string, transactionGuid: string, userGuid: string, managedTransactionUpdateRequestBody: import("../mxClient").ManagedTransactionUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionResponseBody>;
        updateMember(memberGuid: string, userGuid: string, memberUpdateRequestBody: import("../mxClient").MemberUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
        updateTag(tagGuid: string, userGuid: string, tagUpdateRequestBody: import("../mxClient").TagUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TagResponseBody>;
        updateTagging(taggingGuid: string, userGuid: string, taggingUpdateRequestBody: import("../mxClient").TaggingUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TaggingResponseBody>;
        updateTransaction(transactionGuid: string, userGuid: string, transactionUpdateRequestBody: import("../mxClient").TransactionUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionResponseBody>;
        updateTransactionRule(transactionRuleGuid: string, userGuid: string, transactionRuleUpdateRequestBody: import("../mxClient").TransactionRuleUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").TransactionRuleResponseBody>;
        updateUser(userGuid: string, userUpdateRequestBody: import("../mxClient").UserUpdateRequestBody, options?: any): import("axios").AxiosPromise<import("../mxClient").UserResponseBody>;
        verifyMember(memberGuid: string, userGuid: string, options?: any): import("axios").AxiosPromise<import("../mxClient").MemberResponseBody>;
    };
    ListFavorateInstitutions(): Promise<Institution[]>;
    GetInstitutionById(id: string): Promise<Institution>;
    SearchInstitutions(name: string): Promise<Institutions>;
    ListInstitutionCredentials(institutionId: string): Promise<Array<Credential>>;
    CreateConnection(request: CreateConnectionRequest, userId: string): Promise<Connection>;
    UpdateConnection(request: UpdateConnectionRequest, userId: string): Promise<Connection>;
    GetConnectionById(connectionId: string, userId: string): Promise<Connection>;
    GetConnectionStatus(memberId: string, userId: string): Promise<Connection>;
    AnswerChallenge(request: UpdateConnectionRequest, userId: string): Promise<boolean>;
}
