"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MX Platform API
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MxPlatformApi = exports.MxPlatformApiFactory = exports.MxPlatformApiFp = exports.MxPlatformApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * MxPlatformApi - axios parameter creator
 * @export
 */
const MxPlatformApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
         * @summary Aggregate member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('aggregateMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('aggregateMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/aggregate`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
         * @summary Check balances
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkBalances: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('checkBalances', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('checkBalances', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/check_balance`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new custom category for a specific `user`.
         * @summary Create category
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (userGuid, categoryCreateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createCategory', 'userGuid', userGuid);
            // verify required parameter 'categoryCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createCategory', 'categoryCreateRequestBody', categoryCreateRequestBody);
            const localVarPath = `/users/{user_guid}/categories`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(categoryCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a partner-managed account.
         * @summary Create managed account
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedAccount: async (memberGuid, userGuid, managedAccountCreateRequestBody, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('createManagedAccount', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createManagedAccount', 'userGuid', userGuid);
            // verify required parameter 'managedAccountCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createManagedAccount', 'managedAccountCreateRequestBody', managedAccountCreateRequestBody);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedAccountCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new partner-managed `member`.
         * @summary Create managed member
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedMember: async (userGuid, managedMemberCreateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createManagedMember', 'userGuid', userGuid);
            // verify required parameter 'managedMemberCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createManagedMember', 'managedMemberCreateRequestBody', managedMemberCreateRequestBody);
            const localVarPath = `/users/{user_guid}/managed_members`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedMemberCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new partner-managed `transaction`.
         * @summary Create managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedTransaction: async (accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('createManagedTransaction', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('createManagedTransaction', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createManagedTransaction', 'userGuid', userGuid);
            // verify required parameter 'managedTransactionCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createManagedTransaction', 'managedTransactionCreateRequestBody', managedTransactionCreateRequestBody);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedTransactionCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
         * @summary Create member
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember: async (userGuid, memberCreateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createMember', 'userGuid', userGuid);
            // verify required parameter 'memberCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createMember', 'memberCreateRequestBody', memberCreateRequestBody);
            const localVarPath = `/users/{user_guid}/members`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(memberCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new custom tag.
         * @summary Create tag
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag: async (userGuid, tagCreateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createTag', 'userGuid', userGuid);
            // verify required parameter 'tagCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createTag', 'tagCreateRequestBody', tagCreateRequestBody);
            const localVarPath = `/users/{user_guid}/tags`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tagCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
         * @summary Create tagging
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTagging: async (userGuid, taggingCreateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createTagging', 'userGuid', userGuid);
            // verify required parameter 'taggingCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createTagging', 'taggingCreateRequestBody', taggingCreateRequestBody);
            const localVarPath = `/users/{user_guid}/taggings`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(taggingCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
         * @summary Create transaction rule
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransactionRule: async (userGuid, transactionRuleCreateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('createTransactionRule', 'userGuid', userGuid);
            // verify required parameter 'transactionRuleCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createTransactionRule', 'transactionRuleCreateRequestBody', transactionRuleCreateRequestBody);
            const localVarPath = `/users/{user_guid}/transaction_rules`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transactionRuleCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
         * @summary Create user
         * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateRequestBody, options = {}) => {
            // verify required parameter 'userCreateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('createUser', 'userCreateRequestBody', userCreateRequestBody);
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userCreateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
         * @summary Delete category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryGuid, userGuid, options = {}) => {
            // verify required parameter 'categoryGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteCategory', 'categoryGuid', categoryGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteCategory', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/categories/{category_guid}`
                .replace(`{${"category_guid"}}`, encodeURIComponent(String(categoryGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
         * @summary Delete managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManagedAccount: async (accountGuid, memberGuid, userGuid, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedAccount', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedAccount', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedAccount', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
         * @summary Delete managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManagedMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
         * @summary Delete managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManagedTransaction: async (accountGuid, memberGuid, transactionGuid, userGuid, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedTransaction', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedTransaction', 'memberGuid', memberGuid);
            // verify required parameter 'transactionGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedTransaction', 'transactionGuid', transactionGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteManagedTransaction', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"transaction_guid"}}`, encodeURIComponent(String(transactionGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accessing this endpoint will permanently delete a member.
         * @summary Delete member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
         * @summary Delete tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (tagGuid, userGuid, options = {}) => {
            // verify required parameter 'tagGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteTag', 'tagGuid', tagGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteTag', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/tags/{tag_guid}`
                .replace(`{${"tag_guid"}}`, encodeURIComponent(String(tagGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
         * @summary Delete tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagging: async (taggingGuid, userGuid, options = {}) => {
            // verify required parameter 'taggingGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteTagging', 'taggingGuid', taggingGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteTagging', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/taggings/{tagging_guid}`
                .replace(`{${"tagging_guid"}}`, encodeURIComponent(String(taggingGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
         * @summary Delete transaction rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransactionRule: async (transactionRuleGuid, userGuid, options = {}) => {
            // verify required parameter 'transactionRuleGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteTransactionRule', 'transactionRuleGuid', transactionRuleGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteTransactionRule', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/transaction_rules/{transaction_rule_guid}`
                .replace(`{${"transaction_rule_guid"}}`, encodeURIComponent(String(transactionRuleGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
         * @summary Delete user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userGuid, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('deleteUser', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to download a specified statement PDF.
         * @summary Download statement pdf
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadStatementPDF: async (memberGuid, statementGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('downloadStatementPDF', 'memberGuid', memberGuid);
            // verify required parameter 'statementGuid' is not null or undefined
            (0, common_1.assertParamExists)('downloadStatementPDF', 'statementGuid', statementGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('downloadStatementPDF', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/statements/{statement_guid}.pdf`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"statement_guid"}}`, encodeURIComponent(String(statementGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
         * @summary Enhance transactions
         * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enhanceTransactions: async (enhanceTransactionsRequestBody, options = {}) => {
            // verify required parameter 'enhanceTransactionsRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('enhanceTransactions', 'enhanceTransactionsRequestBody', enhanceTransactionsRequestBody);
            const localVarPath = `/transactions/enhance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(enhanceTransactionsRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
         * @summary Extend history
         * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
         * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendHistory: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('extendHistory', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('extendHistory', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/extend_history`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to fetch the statements associated with a particular member.
         * @summary Fetch statements
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatements: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatements', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatements', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/fetch_statements`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The identify endpoint begins an identification process for an already-existing member.
         * @summary Identify member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifyMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('identifyMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('identifyMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/identify`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of account numbers associated with the specified `account`.
         * @summary List account numbers by account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountNumbersByAccount: async (accountGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('listAccountNumbersByAccount', 'accountGuid', accountGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listAccountNumbersByAccount', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/accounts/{account_guid}/account_numbers`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of account numbers associated with the specified `member`.
         * @summary List account numbers by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountNumbersByMember: async (memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listAccountNumbersByMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listAccountNumbersByMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/account_numbers`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns an array with information about every account associated with a particular member.
         * @summary List account owners by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountOwnersByMember: async (memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listAccountOwnersByMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listAccountOwnersByMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/account_owners`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
         * @summary List categories
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listCategories', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/categories`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
         * @summary List default categories
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDefaultCategories: async (page, recordsPerPage, options = {}) => {
            const localVarPath = `/categories/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
         * @summary List default categories by user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDefaultCategoriesByUser: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listDefaultCategoriesByUser', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/categories/default`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
         * @summary List favorite institutions
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFavoriteInstitutions: async (page, recordsPerPage, options = {}) => {
            const localVarPath = `/institutions/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
         * @summary List holdings
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHoldings: async (userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listHoldings', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/holdings`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all holdings associated with the specified `account`.
         * @summary List holdings by account
         * @param {string} accountGuid The unique id for the &#x60;account&#x60;.
         * @param {string} userGuid The unique id for the &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHoldingsByAccount: async (accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('listHoldingsByAccount', 'accountGuid', accountGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listHoldingsByAccount', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/accounts/{account_guid}/holdings`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all holdings associated with the specified `member` across all accounts.
         * @summary List holdings by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHoldingsByMember: async (memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listHoldingsByMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listHoldingsByMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/holdings`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
         * @summary List institution credentials
         * @param {string} institutionCode The institution_code of the institution.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstitutionCredentials: async (institutionCode, page, recordsPerPage, options = {}) => {
            // verify required parameter 'institutionCode' is not null or undefined
            (0, common_1.assertParamExists)('listInstitutionCredentials', 'institutionCode', institutionCode);
            const localVarPath = `/institutions/{institution_code}/credentials`
                .replace(`{${"institution_code"}}`, encodeURIComponent(String(institutionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of institutions based on the specified search term or parameter.
         * @summary List institutions
         * @param {string} [name] This will list only institutions in which the appended string appears.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
         * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
         * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
         * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstitutions: async (name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options = {}) => {
            const localVarPath = `/institutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (supportsAccountIdentification !== undefined) {
                localVarQueryParameter['supports_account_identification'] = supportsAccountIdentification;
            }
            if (supportsAccountStatement !== undefined) {
                localVarQueryParameter['supports_account_statement'] = supportsAccountStatement;
            }
            if (supportsAccountVerification !== undefined) {
                localVarQueryParameter['supports_account_verification'] = supportsAccountVerification;
            }
            if (supportsTransactionHistory !== undefined) {
                localVarQueryParameter['supports_transaction_history'] = supportsTransactionHistory;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
         * @summary List managed accounts
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedAccounts: async (memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listManagedAccounts', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listManagedAccounts', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of institutions which can be used to create partner-managed members.
         * @summary List managed institutions
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedInstitutions: async (page, recordsPerPage, options = {}) => {
            const localVarPath = `/managed_institutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
         * @summary List managed members
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedMembers: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listManagedMembers', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
         * @summary List managed transactions
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedTransactions: async (accountGuid, memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('listManagedTransactions', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listManagedTransactions', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listManagedTransactions', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
         * @summary List member challenges
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMemberChallenges: async (memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listMemberChallenges', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listMemberChallenges', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/challenges`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
         * @summary List member credentials
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMemberCredentials: async (memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listMemberCredentials', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listMemberCredentials', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/credentials`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns an array which contains information on every member associated with a specific user.
         * @summary List members
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listMembers', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a paginated list of all the merchants in the MX system.
         * @summary List merchants
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants: async (page, recordsPerPage, options = {}) => {
            const localVarPath = `/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get an array of available statements.
         * @summary List statements by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStatementsByMember: async (memberGuid, userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listStatementsByMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listStatementsByMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/statements`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
         * @summary List taggings
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaggings: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTaggings', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/taggings`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
         * @summary List tags
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTags', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/tags`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
         * @summary List transaction rules
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionRules: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionRules', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/transaction_rules`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
         * @summary List transactions
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions: async (userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactions', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/transactions`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
         * @summary List transactions by account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsByAccount: async (accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionsByAccount', 'accountGuid', accountGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionsByAccount', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/accounts/{account_guid}/transactions`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
         * @summary List transactions by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsByMember: async (memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionsByMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionsByMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/transactions`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
         * @summary List transactions by tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsByTag: async (tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options = {}) => {
            // verify required parameter 'tagGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionsByTag', 'tagGuid', tagGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listTransactionsByTag', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/tags/{tag_guid}/transactions`
                .replace(`{${"tag_guid"}}`, encodeURIComponent(String(tagGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of all the accounts associated with the specified `user`.
         * @summary List accounts
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAccounts: async (userGuid, page, recordsPerPage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('listUserAccounts', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/accounts`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to list every user you\'ve created in the MX Platform API.
         * @summary List users
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (page, recordsPerPage, options = {}) => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (recordsPerPage !== undefined) {
                localVarQueryParameter['records_per_page'] = recordsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the specified `account` resource.
         * @summary Read account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAccount: async (accountGuid, userGuid, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('readAccount', 'accountGuid', accountGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readAccount', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/accounts/{account_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of either a default category or a custom category.
         * @summary Read a custom category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCategory: async (categoryGuid, userGuid, options = {}) => {
            // verify required parameter 'categoryGuid' is not null or undefined
            (0, common_1.assertParamExists)('readCategory', 'categoryGuid', categoryGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readCategory', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/categories/{category_guid}`
                .replace(`{${"category_guid"}}`, encodeURIComponent(String(categoryGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a default category.
         * @summary Read a default category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDefaultCategory: async (categoryGuid, options = {}) => {
            // verify required parameter 'categoryGuid' is not null or undefined
            (0, common_1.assertParamExists)('readDefaultCategory', 'categoryGuid', categoryGuid);
            const localVarPath = `/categories/{category_guid}`
                .replace(`{${"category_guid"}}`, encodeURIComponent(String(categoryGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a specific `holding`.
         * @summary Read holding
         * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readHolding: async (holdingGuid, userGuid, options = {}) => {
            // verify required parameter 'holdingGuid' is not null or undefined
            (0, common_1.assertParamExists)('readHolding', 'holdingGuid', holdingGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readHolding', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/holdings/{holding_guid}`
                .replace(`{${"holding_guid"}}`, encodeURIComponent(String(holdingGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns information about the institution specified by `institution_code`.
         * @summary Read institution
         * @param {string} institutionCode The institution_code of the institution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readInstitution: async (institutionCode, options = {}) => {
            // verify required parameter 'institutionCode' is not null or undefined
            (0, common_1.assertParamExists)('readInstitution', 'institutionCode', institutionCode);
            const localVarPath = `/institutions/{institution_code}`
                .replace(`{${"institution_code"}}`, encodeURIComponent(String(institutionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
         * @summary Read managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readManagedAccount: async (accountGuid, memberGuid, userGuid, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedAccount', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedAccount', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedAccount', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the attributes of the specified partner-managed `member`.
         * @summary Read managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readManagedMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
         * @summary Read managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readManagedTransaction: async (accountGuid, memberGuid, transactionGuid, userGuid, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedTransaction', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedTransaction', 'memberGuid', memberGuid);
            // verify required parameter 'transactionGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedTransaction', 'transactionGuid', transactionGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readManagedTransaction', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"transaction_guid"}}`, encodeURIComponent(String(transactionGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a specific member.
         * @summary Read member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('readMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
         * @summary Read member status
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberStatus: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('readMemberStatus', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readMemberStatus', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/status`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a particular merchant, such as a logo, name, and website.
         * @summary Read merchant
         * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMerchant: async (merchantGuid, options = {}) => {
            // verify required parameter 'merchantGuid' is not null or undefined
            (0, common_1.assertParamExists)('readMerchant', 'merchantGuid', merchantGuid);
            const localVarPath = `/merchants/{merchant_guid}`
                .replace(`{${"merchant_guid"}}`, encodeURIComponent(String(merchantGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the specified merchant_location resource.
         * @summary Read merchant location
         * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMerchantLocation: async (merchantLocationGuid, options = {}) => {
            // verify required parameter 'merchantLocationGuid' is not null or undefined
            (0, common_1.assertParamExists)('readMerchantLocation', 'merchantLocationGuid', merchantLocationGuid);
            const localVarPath = `/merchant_locations/{merchant_location_guid}`
                .replace(`{${"merchant_location_guid"}}`, encodeURIComponent(String(merchantLocationGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read a JSON representation of the statement.
         * @summary Read statement by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStatementByMember: async (memberGuid, statementGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('readStatementByMember', 'memberGuid', memberGuid);
            // verify required parameter 'statementGuid' is not null or undefined
            (0, common_1.assertParamExists)('readStatementByMember', 'statementGuid', statementGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readStatementByMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/statements/{statement_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"statement_guid"}}`, encodeURIComponent(String(statementGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
         * @summary Read tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTag: async (tagGuid, userGuid, options = {}) => {
            // verify required parameter 'tagGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTag', 'tagGuid', tagGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTag', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/tags/{tag_guid}`
                .replace(`{${"tag_guid"}}`, encodeURIComponent(String(tagGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
         * @summary Read tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTagging: async (taggingGuid, userGuid, options = {}) => {
            // verify required parameter 'taggingGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTagging', 'taggingGuid', taggingGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTagging', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/taggings/{tagging_guid}`
                .replace(`{${"tagging_guid"}}`, encodeURIComponent(String(taggingGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests to this endpoint will return the attributes of the specified `transaction`.
         * @summary Read transaction
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTransaction: async (transactionGuid, userGuid, options = {}) => {
            // verify required parameter 'transactionGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTransaction', 'transactionGuid', transactionGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTransaction', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/transactions/{transaction_guid}`
                .replace(`{${"transaction_guid"}}`, encodeURIComponent(String(transactionGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
         * @summary Read transaction rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTransactionRule: async (transactionRuleGuid, userGuid, options = {}) => {
            // verify required parameter 'transactionRuleGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTransactionRule', 'transactionRuleGuid', transactionRuleGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readTransactionRule', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/transaction_rules/{transaction_rule_guid}`
                .replace(`{${"transaction_rule_guid"}}`, encodeURIComponent(String(transactionRuleGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to read the attributes of a specific user.
         * @summary Read user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUser: async (userGuid, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('readUser', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will return a URL for an embeddable version of MX Connect.
         * @summary Request connect widget url
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ConnectWidgetRequestBody} connectWidgetRequestBody Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestConnectWidgetURL: async (userGuid, connectWidgetRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('requestConnectWidgetURL', 'userGuid', userGuid);
            // verify required parameter 'connectWidgetRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('requestConnectWidgetURL', 'connectWidgetRequestBody', connectWidgetRequestBody);
            const localVarPath = `/users/{user_guid}/connect_widget_url`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(connectWidgetRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will generate an `oauth_window_uri` for the specified `member`.
         * @summary Request oauth window uri
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [clientRedirectUrl] A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
         * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
         * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
         * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestOAuthWindowURI: async (memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('requestOAuthWindowURI', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('requestOAuthWindowURI', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/oauth_window_uri`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (clientRedirectUrl !== undefined) {
                localVarQueryParameter['client_redirect_url'] = clientRedirectUrl;
            }
            if (referralSource !== undefined) {
                localVarQueryParameter['referral_source'] = referralSource;
            }
            if (skipAggregation !== undefined) {
                localVarQueryParameter['skip_aggregation'] = skipAggregation;
            }
            if (uiMessageWebviewUrlScheme !== undefined) {
                localVarQueryParameter['ui_message_webview_url_scheme'] = uiMessageWebviewUrlScheme;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
         * @summary Request widget url
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
         * @param {string} [acceptLanguage] The desired language of the widget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestWidgetURL: async (userGuid, widgetRequestBody, acceptLanguage, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('requestWidgetURL', 'userGuid', userGuid);
            // verify required parameter 'widgetRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('requestWidgetURL', 'widgetRequestBody', widgetRequestBody);
            const localVarPath = `/users/{user_guid}/widget_urls`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(widgetRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
         * @summary Resume aggregation
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeAggregation: async (memberGuid, userGuid, memberResumeRequestBody, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('resumeAggregation', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('resumeAggregation', 'userGuid', userGuid);
            // verify required parameter 'memberResumeRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('resumeAggregation', 'memberResumeRequestBody', memberResumeRequestBody);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/resume`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(memberResumeRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update certain attributes of an `account` resource.
         * @summary Update account by member
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountByMember: async (accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateAccountByMember', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateAccountByMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateAccountByMember', 'userGuid', userGuid);
            // verify required parameter 'accountUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateAccountByMember', 'accountUpdateRequestBody', accountUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/accounts/{account_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the attributes of a custom category according to its unique GUID.
         * @summary Update category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (categoryGuid, userGuid, categoryUpdateRequestBody, options = {}) => {
            // verify required parameter 'categoryGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateCategory', 'categoryGuid', categoryGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateCategory', 'userGuid', userGuid);
            // verify required parameter 'categoryUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateCategory', 'categoryUpdateRequestBody', categoryUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/categories/{category_guid}`
                .replace(`{${"category_guid"}}`, encodeURIComponent(String(categoryGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(categoryUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
         * @summary Update managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedAccount: async (accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedAccount', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedAccount', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedAccount', 'userGuid', userGuid);
            // verify required parameter 'managedAccountUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedAccount', 'managedAccountUpdateRequestBody', managedAccountUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedAccountUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the attributes of the specified partner_managed `member`.
         * @summary Update managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedMember: async (memberGuid, userGuid, managedMemberUpdateRequestBody, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedMember', 'userGuid', userGuid);
            // verify required parameter 'managedMemberUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedMember', 'managedMemberUpdateRequestBody', managedMemberUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedMemberUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
         * @summary Update managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedTransaction: async (accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options = {}) => {
            // verify required parameter 'accountGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedTransaction', 'accountGuid', accountGuid);
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedTransaction', 'memberGuid', memberGuid);
            // verify required parameter 'transactionGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedTransaction', 'transactionGuid', transactionGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedTransaction', 'userGuid', userGuid);
            // verify required parameter 'managedTransactionUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateManagedTransaction', 'managedTransactionUpdateRequestBody', managedTransactionUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}`
                .replace(`{${"account_guid"}}`, encodeURIComponent(String(accountGuid)))
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"transaction_guid"}}`, encodeURIComponent(String(transactionGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedTransactionUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
         * @summary Update member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember: async (memberGuid, userGuid, memberUpdateRequestBody, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateMember', 'userGuid', userGuid);
            // verify required parameter 'memberUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateMember', 'memberUpdateRequestBody', memberUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/members/{member_guid}`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(memberUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the name of a specific tag according to its unique GUID.
         * @summary Update tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag: async (tagGuid, userGuid, tagUpdateRequestBody, options = {}) => {
            // verify required parameter 'tagGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTag', 'tagGuid', tagGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTag', 'userGuid', userGuid);
            // verify required parameter 'tagUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateTag', 'tagUpdateRequestBody', tagUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/tags/{tag_guid}`
                .replace(`{${"tag_guid"}}`, encodeURIComponent(String(tagGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tagUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update a tagging.
         * @summary Update tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTagging: async (taggingGuid, userGuid, taggingUpdateRequestBody, options = {}) => {
            // verify required parameter 'taggingGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTagging', 'taggingGuid', taggingGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTagging', 'userGuid', userGuid);
            // verify required parameter 'taggingUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateTagging', 'taggingUpdateRequestBody', taggingUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/taggings/{tagging_guid}`
                .replace(`{${"tagging_guid"}}`, encodeURIComponent(String(taggingGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(taggingUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
         * @summary Update transaction
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction: async (transactionGuid, userGuid, transactionUpdateRequestBody, options = {}) => {
            // verify required parameter 'transactionGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTransaction', 'transactionGuid', transactionGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTransaction', 'userGuid', userGuid);
            // verify required parameter 'transactionUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateTransaction', 'transactionUpdateRequestBody', transactionUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/transactions/{transaction_guid}`
                .replace(`{${"transaction_guid"}}`, encodeURIComponent(String(transactionGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transactionUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
         * @summary Update transaction_rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionRule: async (transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options = {}) => {
            // verify required parameter 'transactionRuleGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTransactionRule', 'transactionRuleGuid', transactionRuleGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateTransactionRule', 'userGuid', userGuid);
            // verify required parameter 'transactionRuleUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateTransactionRule', 'transactionRuleUpdateRequestBody', transactionRuleUpdateRequestBody);
            const localVarPath = `/users/{user_guid}/transaction_rules/{transaction_rule_guid}`
                .replace(`{${"transaction_rule_guid"}}`, encodeURIComponent(String(transactionRuleGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transactionRuleUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update the attributes of the specified user.
         * @summary Update user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userGuid, userUpdateRequestBody, options = {}) => {
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('updateUser', 'userGuid', userGuid);
            // verify required parameter 'userUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('updateUser', 'userUpdateRequestBody', userUpdateRequestBody);
            const localVarPath = `/users/{user_guid}`
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The verify endpoint begins a verification process for a member.
         * @summary Verify member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMember: async (memberGuid, userGuid, options = {}) => {
            // verify required parameter 'memberGuid' is not null or undefined
            (0, common_1.assertParamExists)('verifyMember', 'memberGuid', memberGuid);
            // verify required parameter 'userGuid' is not null or undefined
            (0, common_1.assertParamExists)('verifyMember', 'userGuid', userGuid);
            const localVarPath = `/users/{user_guid}/members/{member_guid}/verify`
                .replace(`{${"member_guid"}}`, encodeURIComponent(String(memberGuid)))
                .replace(`{${"user_guid"}}`, encodeURIComponent(String(userGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MxPlatformApiAxiosParamCreator = MxPlatformApiAxiosParamCreator;
/**
 * MxPlatformApi - functional programming interface
 * @export
 */
const MxPlatformApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MxPlatformApiAxiosParamCreator)(configuration);
    return {
        /**
         * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
         * @summary Aggregate member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aggregateMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aggregateMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
         * @summary Check balances
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkBalances(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkBalances(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new custom category for a specific `user`.
         * @summary Create category
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(userGuid, categoryCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(userGuid, categoryCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a partner-managed account.
         * @summary Create managed account
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new partner-managed `member`.
         * @summary Create managed member
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManagedMember(userGuid, managedMemberCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManagedMember(userGuid, managedMemberCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new partner-managed `transaction`.
         * @summary Create managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
         * @summary Create member
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMember(userGuid, memberCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMember(userGuid, memberCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new custom tag.
         * @summary Create tag
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag(userGuid, tagCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTag(userGuid, tagCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
         * @summary Create tagging
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTagging(userGuid, taggingCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTagging(userGuid, taggingCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
         * @summary Create transaction rule
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransactionRule(userGuid, transactionRuleCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransactionRule(userGuid, transactionRuleCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
         * @summary Create user
         * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
         * @summary Delete category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(categoryGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(categoryGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
         * @summary Delete managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteManagedAccount(accountGuid, memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteManagedAccount(accountGuid, memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
         * @summary Delete managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteManagedMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteManagedMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
         * @summary Delete managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Accessing this endpoint will permanently delete a member.
         * @summary Delete member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
         * @summary Delete tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(tagGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(tagGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
         * @summary Delete tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTagging(taggingGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTagging(taggingGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
         * @summary Delete transaction rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransactionRule(transactionRuleGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTransactionRule(transactionRuleGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
         * @summary Delete user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to download a specified statement PDF.
         * @summary Download statement pdf
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadStatementPDF(memberGuid, statementGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadStatementPDF(memberGuid, statementGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
         * @summary Enhance transactions
         * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enhanceTransactions(enhanceTransactionsRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enhanceTransactions(enhanceTransactionsRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
         * @summary Extend history
         * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
         * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extendHistory(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extendHistory(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to fetch the statements associated with a particular member.
         * @summary Fetch statements
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchStatements(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchStatements(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The identify endpoint begins an identification process for an already-existing member.
         * @summary Identify member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifyMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifyMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of account numbers associated with the specified `account`.
         * @summary List account numbers by account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of account numbers associated with the specified `member`.
         * @summary List account numbers by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns an array with information about every account associated with a particular member.
         * @summary List account owners by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
         * @summary List categories
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
         * @summary List default categories
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDefaultCategories(page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDefaultCategories(page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
         * @summary List default categories by user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDefaultCategoriesByUser(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDefaultCategoriesByUser(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
         * @summary List favorite institutions
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFavoriteInstitutions(page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFavoriteInstitutions(page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
         * @summary List holdings
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHoldings(userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHoldings(userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns all holdings associated with the specified `account`.
         * @summary List holdings by account
         * @param {string} accountGuid The unique id for the &#x60;account&#x60;.
         * @param {string} userGuid The unique id for the &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns all holdings associated with the specified `member` across all accounts.
         * @summary List holdings by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
         * @summary List institution credentials
         * @param {string} institutionCode The institution_code of the institution.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInstitutionCredentials(institutionCode, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInstitutionCredentials(institutionCode, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of institutions based on the specified search term or parameter.
         * @summary List institutions
         * @param {string} [name] This will list only institutions in which the appended string appears.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
         * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
         * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
         * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
         * @summary List managed accounts
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManagedAccounts(memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManagedAccounts(memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of institutions which can be used to create partner-managed members.
         * @summary List managed institutions
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManagedInstitutions(page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManagedInstitutions(page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
         * @summary List managed members
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManagedMembers(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManagedMembers(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
         * @summary List managed transactions
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
         * @summary List member challenges
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMemberChallenges(memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMemberChallenges(memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
         * @summary List member credentials
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMemberCredentials(memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMemberCredentials(memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns an array which contains information on every member associated with a specific user.
         * @summary List members
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembers(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembers(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a paginated list of all the merchants in the MX system.
         * @summary List merchants
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMerchants(page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMerchants(page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to get an array of available statements.
         * @summary List statements by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStatementsByMember(memberGuid, userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStatementsByMember(memberGuid, userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
         * @summary List taggings
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTaggings(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTaggings(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
         * @summary List tags
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTags(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
         * @summary List transaction rules
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionRules(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionRules(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
         * @summary List transactions
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactions(userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactions(userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
         * @summary List transactions by account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
         * @summary List transactions by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
         * @summary List transactions by tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of all the accounts associated with the specified `user`.
         * @summary List accounts
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserAccounts(userGuid, page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserAccounts(userGuid, page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to list every user you\'ve created in the MX Platform API.
         * @summary List users
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(page, recordsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(page, recordsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the specified `account` resource.
         * @summary Read account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAccount(accountGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAccount(accountGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of either a default category or a custom category.
         * @summary Read a custom category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readCategory(categoryGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readCategory(categoryGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a default category.
         * @summary Read a default category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readDefaultCategory(categoryGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readDefaultCategory(categoryGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a specific `holding`.
         * @summary Read holding
         * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readHolding(holdingGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readHolding(holdingGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns information about the institution specified by `institution_code`.
         * @summary Read institution
         * @param {string} institutionCode The institution_code of the institution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readInstitution(institutionCode, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readInstitution(institutionCode, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
         * @summary Read managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readManagedAccount(accountGuid, memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readManagedAccount(accountGuid, memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the attributes of the specified partner-managed `member`.
         * @summary Read managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readManagedMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readManagedMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
         * @summary Read managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a specific member.
         * @summary Read member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
         * @summary Read member status
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMemberStatus(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMemberStatus(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns information about a particular merchant, such as a logo, name, and website.
         * @summary Read merchant
         * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMerchant(merchantGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMerchant(merchantGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the specified merchant_location resource.
         * @summary Read merchant location
         * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMerchantLocation(merchantLocationGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMerchantLocation(merchantLocationGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read a JSON representation of the statement.
         * @summary Read statement by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStatementByMember(memberGuid, statementGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStatementByMember(memberGuid, statementGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
         * @summary Read tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTag(tagGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTag(tagGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
         * @summary Read tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTagging(taggingGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTagging(taggingGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Requests to this endpoint will return the attributes of the specified `transaction`.
         * @summary Read transaction
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTransaction(transactionGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTransaction(transactionGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
         * @summary Read transaction rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTransactionRule(transactionRuleGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTransactionRule(transactionRuleGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to read the attributes of a specific user.
         * @summary Read user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUser(userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUser(userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint will return a URL for an embeddable version of MX Connect.
         * @summary Request connect widget url
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ConnectWidgetRequestBody} connectWidgetRequestBody Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestConnectWidgetURL(userGuid, connectWidgetRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestConnectWidgetURL(userGuid, connectWidgetRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint will generate an `oauth_window_uri` for the specified `member`.
         * @summary Request oauth window uri
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [clientRedirectUrl] A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
         * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
         * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
         * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
         * @summary Request widget url
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
         * @param {string} [acceptLanguage] The desired language of the widget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestWidgetURL(userGuid, widgetRequestBody, acceptLanguage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestWidgetURL(userGuid, widgetRequestBody, acceptLanguage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
         * @summary Resume aggregation
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeAggregation(memberGuid, userGuid, memberResumeRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeAggregation(memberGuid, userGuid, memberResumeRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update certain attributes of an `account` resource.
         * @summary Update account by member
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the attributes of a custom category according to its unique GUID.
         * @summary Update category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(categoryGuid, userGuid, categoryUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(categoryGuid, userGuid, categoryUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
         * @summary Update managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the attributes of the specified partner_managed `member`.
         * @summary Update managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
         * @summary Update managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
         * @summary Update member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMember(memberGuid, userGuid, memberUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMember(memberGuid, userGuid, memberUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the name of a specific tag according to its unique GUID.
         * @summary Update tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTag(tagGuid, userGuid, tagUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTag(tagGuid, userGuid, tagUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update a tagging.
         * @summary Update tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTagging(taggingGuid, userGuid, taggingUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTagging(taggingGuid, userGuid, taggingUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
         * @summary Update transaction
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
         * @summary Update transaction_rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update the attributes of the specified user.
         * @summary Update user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userGuid, userUpdateRequestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userGuid, userUpdateRequestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The verify endpoint begins a verification process for a member.
         * @summary Verify member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyMember(memberGuid, userGuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyMember(memberGuid, userGuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.MxPlatformApiFp = MxPlatformApiFp;
/**
 * MxPlatformApi - factory interface
 * @export
 */
const MxPlatformApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MxPlatformApiFp)(configuration);
    return {
        /**
         * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
         * @summary Aggregate member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateMember(memberGuid, userGuid, options) {
            return localVarFp.aggregateMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
         * @summary Check balances
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkBalances(memberGuid, userGuid, options) {
            return localVarFp.checkBalances(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new custom category for a specific `user`.
         * @summary Create category
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(userGuid, categoryCreateRequestBody, options) {
            return localVarFp.createCategory(userGuid, categoryCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a partner-managed account.
         * @summary Create managed account
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody, options) {
            return localVarFp.createManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new partner-managed `member`.
         * @summary Create managed member
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedMember(userGuid, managedMemberCreateRequestBody, options) {
            return localVarFp.createManagedMember(userGuid, managedMemberCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new partner-managed `transaction`.
         * @summary Create managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options) {
            return localVarFp.createManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
         * @summary Create member
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(userGuid, memberCreateRequestBody, options) {
            return localVarFp.createMember(userGuid, memberCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new custom tag.
         * @summary Create tag
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(userGuid, tagCreateRequestBody, options) {
            return localVarFp.createTag(userGuid, tagCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
         * @summary Create tagging
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTagging(userGuid, taggingCreateRequestBody, options) {
            return localVarFp.createTagging(userGuid, taggingCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
         * @summary Create transaction rule
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransactionRule(userGuid, transactionRuleCreateRequestBody, options) {
            return localVarFp.createTransactionRule(userGuid, transactionRuleCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
         * @summary Create user
         * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCreateRequestBody, options) {
            return localVarFp.createUser(userCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
         * @summary Delete category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(categoryGuid, userGuid, options) {
            return localVarFp.deleteCategory(categoryGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
         * @summary Delete managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManagedAccount(accountGuid, memberGuid, userGuid, options) {
            return localVarFp.deleteManagedAccount(accountGuid, memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
         * @summary Delete managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManagedMember(memberGuid, userGuid, options) {
            return localVarFp.deleteManagedMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
         * @summary Delete managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options) {
            return localVarFp.deleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Accessing this endpoint will permanently delete a member.
         * @summary Delete member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(memberGuid, userGuid, options) {
            return localVarFp.deleteMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
         * @summary Delete tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(tagGuid, userGuid, options) {
            return localVarFp.deleteTag(tagGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
         * @summary Delete tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagging(taggingGuid, userGuid, options) {
            return localVarFp.deleteTagging(taggingGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
         * @summary Delete transaction rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransactionRule(transactionRuleGuid, userGuid, options) {
            return localVarFp.deleteTransactionRule(transactionRuleGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
         * @summary Delete user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userGuid, options) {
            return localVarFp.deleteUser(userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to download a specified statement PDF.
         * @summary Download statement pdf
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadStatementPDF(memberGuid, statementGuid, userGuid, options) {
            return localVarFp.downloadStatementPDF(memberGuid, statementGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
         * @summary Enhance transactions
         * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enhanceTransactions(enhanceTransactionsRequestBody, options) {
            return localVarFp.enhanceTransactions(enhanceTransactionsRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
         * @summary Extend history
         * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
         * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendHistory(memberGuid, userGuid, options) {
            return localVarFp.extendHistory(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to fetch the statements associated with a particular member.
         * @summary Fetch statements
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatements(memberGuid, userGuid, options) {
            return localVarFp.fetchStatements(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * The identify endpoint begins an identification process for an already-existing member.
         * @summary Identify member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifyMember(memberGuid, userGuid, options) {
            return localVarFp.identifyMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of account numbers associated with the specified `account`.
         * @summary List account numbers by account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of account numbers associated with the specified `member`.
         * @summary List account numbers by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns an array with information about every account associated with a particular member.
         * @summary List account owners by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
         * @summary List categories
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories(userGuid, page, recordsPerPage, options) {
            return localVarFp.listCategories(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
         * @summary List default categories
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDefaultCategories(page, recordsPerPage, options) {
            return localVarFp.listDefaultCategories(page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
         * @summary List default categories by user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDefaultCategoriesByUser(userGuid, page, recordsPerPage, options) {
            return localVarFp.listDefaultCategoriesByUser(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
         * @summary List favorite institutions
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFavoriteInstitutions(page, recordsPerPage, options) {
            return localVarFp.listFavoriteInstitutions(page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
         * @summary List holdings
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHoldings(userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listHoldings(userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all holdings associated with the specified `account`.
         * @summary List holdings by account
         * @param {string} accountGuid The unique id for the &#x60;account&#x60;.
         * @param {string} userGuid The unique id for the &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all holdings associated with the specified `member` across all accounts.
         * @summary List holdings by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter holdings from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter holdings to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
         * @summary List institution credentials
         * @param {string} institutionCode The institution_code of the institution.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstitutionCredentials(institutionCode, page, recordsPerPage, options) {
            return localVarFp.listInstitutionCredentials(institutionCode, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of institutions based on the specified search term or parameter.
         * @summary List institutions
         * @param {string} [name] This will list only institutions in which the appended string appears.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
         * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
         * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
         * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options) {
            return localVarFp.listInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
         * @summary List managed accounts
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedAccounts(memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listManagedAccounts(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of institutions which can be used to create partner-managed members.
         * @summary List managed institutions
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedInstitutions(page, recordsPerPage, options) {
            return localVarFp.listManagedInstitutions(page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
         * @summary List managed members
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedMembers(userGuid, page, recordsPerPage, options) {
            return localVarFp.listManagedMembers(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
         * @summary List managed transactions
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
         * @summary List member challenges
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMemberChallenges(memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listMemberChallenges(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
         * @summary List member credentials
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMemberCredentials(memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listMemberCredentials(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns an array which contains information on every member associated with a specific user.
         * @summary List members
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers(userGuid, page, recordsPerPage, options) {
            return localVarFp.listMembers(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a paginated list of all the merchants in the MX system.
         * @summary List merchants
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants(page, recordsPerPage, options) {
            return localVarFp.listMerchants(page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get an array of available statements.
         * @summary List statements by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStatementsByMember(memberGuid, userGuid, page, recordsPerPage, options) {
            return localVarFp.listStatementsByMember(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
         * @summary List taggings
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaggings(userGuid, page, recordsPerPage, options) {
            return localVarFp.listTaggings(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
         * @summary List tags
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(userGuid, page, recordsPerPage, options) {
            return localVarFp.listTags(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
         * @summary List transaction rules
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionRules(userGuid, page, recordsPerPage, options) {
            return localVarFp.listTransactionRules(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
         * @summary List transactions
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions(userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listTransactions(userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
         * @summary List transactions by account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
         * @summary List transactions by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
         * @summary List transactions by tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [fromDate] Filter transactions from this date.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {string} [toDate] Filter transactions to this date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
            return localVarFp.listTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of all the accounts associated with the specified `user`.
         * @summary List accounts
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAccounts(userGuid, page, recordsPerPage, options) {
            return localVarFp.listUserAccounts(userGuid, page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to list every user you\'ve created in the MX Platform API.
         * @summary List users
         * @param {number} [page] Specify current page.
         * @param {number} [recordsPerPage] Specify records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page, recordsPerPage, options) {
            return localVarFp.listUsers(page, recordsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the specified `account` resource.
         * @summary Read account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAccount(accountGuid, userGuid, options) {
            return localVarFp.readAccount(accountGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of either a default category or a custom category.
         * @summary Read a custom category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCategory(categoryGuid, userGuid, options) {
            return localVarFp.readCategory(categoryGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a default category.
         * @summary Read a default category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDefaultCategory(categoryGuid, options) {
            return localVarFp.readDefaultCategory(categoryGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a specific `holding`.
         * @summary Read holding
         * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readHolding(holdingGuid, userGuid, options) {
            return localVarFp.readHolding(holdingGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns information about the institution specified by `institution_code`.
         * @summary Read institution
         * @param {string} institutionCode The institution_code of the institution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readInstitution(institutionCode, options) {
            return localVarFp.readInstitution(institutionCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
         * @summary Read managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readManagedAccount(accountGuid, memberGuid, userGuid, options) {
            return localVarFp.readManagedAccount(accountGuid, memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the attributes of the specified partner-managed `member`.
         * @summary Read managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readManagedMember(memberGuid, userGuid, options) {
            return localVarFp.readManagedMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
         * @summary Read managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options) {
            return localVarFp.readManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a specific member.
         * @summary Read member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMember(memberGuid, userGuid, options) {
            return localVarFp.readMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
         * @summary Read member status
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMemberStatus(memberGuid, userGuid, options) {
            return localVarFp.readMemberStatus(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a particular merchant, such as a logo, name, and website.
         * @summary Read merchant
         * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMerchant(merchantGuid, options) {
            return localVarFp.readMerchant(merchantGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the specified merchant_location resource.
         * @summary Read merchant location
         * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMerchantLocation(merchantLocationGuid, options) {
            return localVarFp.readMerchantLocation(merchantLocationGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read a JSON representation of the statement.
         * @summary Read statement by member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStatementByMember(memberGuid, statementGuid, userGuid, options) {
            return localVarFp.readStatementByMember(memberGuid, statementGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
         * @summary Read tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTag(tagGuid, userGuid, options) {
            return localVarFp.readTag(tagGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
         * @summary Read tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTagging(taggingGuid, userGuid, options) {
            return localVarFp.readTagging(taggingGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests to this endpoint will return the attributes of the specified `transaction`.
         * @summary Read transaction
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTransaction(transactionGuid, userGuid, options) {
            return localVarFp.readTransaction(transactionGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
         * @summary Read transaction rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTransactionRule(transactionRuleGuid, userGuid, options) {
            return localVarFp.readTransactionRule(transactionRuleGuid, userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to read the attributes of a specific user.
         * @summary Read user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUser(userGuid, options) {
            return localVarFp.readUser(userGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a URL for an embeddable version of MX Connect.
         * @summary Request connect widget url
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ConnectWidgetRequestBody} connectWidgetRequestBody Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestConnectWidgetURL(userGuid, connectWidgetRequestBody, options) {
            return localVarFp.requestConnectWidgetURL(userGuid, connectWidgetRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will generate an `oauth_window_uri` for the specified `member`.
         * @summary Request oauth window uri
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {string} [clientRedirectUrl] A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
         * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
         * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
         * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options) {
            return localVarFp.requestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
         * @summary Request widget url
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
         * @param {string} [acceptLanguage] The desired language of the widget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestWidgetURL(userGuid, widgetRequestBody, acceptLanguage, options) {
            return localVarFp.requestWidgetURL(userGuid, widgetRequestBody, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
         * @summary Resume aggregation
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeAggregation(memberGuid, userGuid, memberResumeRequestBody, options) {
            return localVarFp.resumeAggregation(memberGuid, userGuid, memberResumeRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update certain attributes of an `account` resource.
         * @summary Update account by member
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options) {
            return localVarFp.updateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the attributes of a custom category according to its unique GUID.
         * @summary Update category
         * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(categoryGuid, userGuid, categoryUpdateRequestBody, options) {
            return localVarFp.updateCategory(categoryGuid, userGuid, categoryUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
         * @summary Update managed account
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options) {
            return localVarFp.updateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the attributes of the specified partner_managed `member`.
         * @summary Update managed member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody, options) {
            return localVarFp.updateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
         * @summary Update managed transaction
         * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options) {
            return localVarFp.updateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
         * @summary Update member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(memberGuid, userGuid, memberUpdateRequestBody, options) {
            return localVarFp.updateMember(memberGuid, userGuid, memberUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the name of a specific tag according to its unique GUID.
         * @summary Update tag
         * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(tagGuid, userGuid, tagUpdateRequestBody, options) {
            return localVarFp.updateTag(tagGuid, userGuid, tagUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update a tagging.
         * @summary Update tagging
         * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTagging(taggingGuid, userGuid, taggingUpdateRequestBody, options) {
            return localVarFp.updateTagging(taggingGuid, userGuid, taggingUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
         * @summary Update transaction
         * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody, options) {
            return localVarFp.updateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
         * @summary Update transaction_rule
         * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options) {
            return localVarFp.updateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update the attributes of the specified user.
         * @summary Update user
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userGuid, userUpdateRequestBody, options) {
            return localVarFp.updateUser(userGuid, userUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * The verify endpoint begins a verification process for a member.
         * @summary Verify member
         * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
         * @param {string} userGuid The unique id for a &#x60;user&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMember(memberGuid, userGuid, options) {
            return localVarFp.verifyMember(memberGuid, userGuid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MxPlatformApiFactory = MxPlatformApiFactory;
/**
 * MxPlatformApi - object-oriented interface
 * @export
 * @class MxPlatformApi
 * @extends {BaseAPI}
 */
class MxPlatformApi extends base_1.BaseAPI {
    /**
     * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
     * @summary Aggregate member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    aggregateMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).aggregateMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
     * @summary Check balances
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    checkBalances(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).checkBalances(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new custom category for a specific `user`.
     * @summary Create category
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createCategory(userGuid, categoryCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createCategory(userGuid, categoryCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a partner-managed account.
     * @summary Create managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new partner-managed `member`.
     * @summary Create managed member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createManagedMember(userGuid, managedMemberCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createManagedMember(userGuid, managedMemberCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new partner-managed `transaction`.
     * @summary Create managed transaction
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
     * @summary Create member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createMember(userGuid, memberCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createMember(userGuid, memberCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new custom tag.
     * @summary Create tag
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createTag(userGuid, tagCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createTag(userGuid, tagCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
     * @summary Create tagging
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createTagging(userGuid, taggingCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createTagging(userGuid, taggingCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
     * @summary Create transaction rule
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createTransactionRule(userGuid, transactionRuleCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createTransactionRule(userGuid, transactionRuleCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
     * @summary Create user
     * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createUser(userCreateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).createUser(userCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
     * @summary Delete category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteCategory(categoryGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteCategory(categoryGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
     * @summary Delete managed account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteManagedAccount(accountGuid, memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteManagedAccount(accountGuid, memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteManagedMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteManagedMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed transaction
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Accessing this endpoint will permanently delete a member.
     * @summary Delete member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
     * @summary Delete tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteTag(tagGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteTag(tagGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
     * @summary Delete tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteTagging(taggingGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteTagging(taggingGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
     * @summary Delete transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteTransactionRule(transactionRuleGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteTransactionRule(transactionRuleGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
     * @summary Delete user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteUser(userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).deleteUser(userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to download a specified statement PDF.
     * @summary Download statement pdf
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    downloadStatementPDF(memberGuid, statementGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).downloadStatementPDF(memberGuid, statementGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
     * @summary Enhance transactions
     * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    enhanceTransactions(enhanceTransactionsRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).enhanceTransactions(enhanceTransactionsRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
     * @summary Extend history
     * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
     * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    extendHistory(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).extendHistory(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to fetch the statements associated with a particular member.
     * @summary Fetch statements
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    fetchStatements(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).fetchStatements(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The identify endpoint begins an identification process for an already-existing member.
     * @summary Identify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    identifyMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).identifyMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of account numbers associated with the specified `account`.
     * @summary List account numbers by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of account numbers associated with the specified `member`.
     * @summary List account numbers by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns an array with information about every account associated with a particular member.
     * @summary List account owners by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
     * @summary List categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listCategories(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listCategories(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
     * @summary List default categories
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listDefaultCategories(page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listDefaultCategories(page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
     * @summary List default categories by user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listDefaultCategoriesByUser(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listDefaultCategoriesByUser(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
     * @summary List favorite institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listFavoriteInstitutions(page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listFavoriteInstitutions(page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
     * @summary List holdings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listHoldings(userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listHoldings(userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all holdings associated with the specified `account`.
     * @summary List holdings by account
     * @param {string} accountGuid The unique id for the &#x60;account&#x60;.
     * @param {string} userGuid The unique id for the &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all holdings associated with the specified `member` across all accounts.
     * @summary List holdings by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
     * @summary List institution credentials
     * @param {string} institutionCode The institution_code of the institution.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listInstitutionCredentials(institutionCode, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listInstitutionCredentials(institutionCode, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of institutions based on the specified search term or parameter.
     * @summary List institutions
     * @param {string} [name] This will list only institutions in which the appended string appears.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
     * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
     * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
     * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
     * @summary List managed accounts
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedAccounts(memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listManagedAccounts(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of institutions which can be used to create partner-managed members.
     * @summary List managed institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedInstitutions(page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listManagedInstitutions(page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
     * @summary List managed members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedMembers(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listManagedMembers(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
     * @summary List managed transactions
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
     * @summary List member challenges
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMemberChallenges(memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listMemberChallenges(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
     * @summary List member credentials
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMemberCredentials(memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listMemberCredentials(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns an array which contains information on every member associated with a specific user.
     * @summary List members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMembers(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listMembers(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a paginated list of all the merchants in the MX system.
     * @summary List merchants
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMerchants(page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listMerchants(page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to get an array of available statements.
     * @summary List statements by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listStatementsByMember(memberGuid, userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listStatementsByMember(memberGuid, userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
     * @summary List taggings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTaggings(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTaggings(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
     * @summary List tags
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTags(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTags(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
     * @summary List transaction rules
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionRules(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTransactionRules(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
     * @summary List transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactions(userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTransactions(userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
     * @summary List transactions by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
     * @summary List transactions by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
     * @summary List transactions by tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of all the accounts associated with the specified `user`.
     * @summary List accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listUserAccounts(userGuid, page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listUserAccounts(userGuid, page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to list every user you\'ve created in the MX Platform API.
     * @summary List users
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listUsers(page, recordsPerPage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).listUsers(page, recordsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the specified `account` resource.
     * @summary Read account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readAccount(accountGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readAccount(accountGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of either a default category or a custom category.
     * @summary Read a custom category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readCategory(categoryGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readCategory(categoryGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a default category.
     * @summary Read a default category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readDefaultCategory(categoryGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readDefaultCategory(categoryGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a specific `holding`.
     * @summary Read holding
     * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readHolding(holdingGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readHolding(holdingGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns information about the institution specified by `institution_code`.
     * @summary Read institution
     * @param {string} institutionCode The institution_code of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readInstitution(institutionCode, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readInstitution(institutionCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
     * @summary Read managed account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readManagedAccount(accountGuid, memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readManagedAccount(accountGuid, memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the attributes of the specified partner-managed `member`.
     * @summary Read managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readManagedMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readManagedMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
     * @summary Read managed transaction
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a specific member.
     * @summary Read member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
     * @summary Read member status
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMemberStatus(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readMemberStatus(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about a particular merchant, such as a logo, name, and website.
     * @summary Read merchant
     * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMerchant(merchantGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readMerchant(merchantGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the specified merchant_location resource.
     * @summary Read merchant location
     * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMerchantLocation(merchantLocationGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readMerchantLocation(merchantLocationGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read a JSON representation of the statement.
     * @summary Read statement by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readStatementByMember(memberGuid, statementGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readStatementByMember(memberGuid, statementGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
     * @summary Read tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTag(tagGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readTag(tagGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
     * @summary Read tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTagging(taggingGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readTagging(taggingGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests to this endpoint will return the attributes of the specified `transaction`.
     * @summary Read transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTransaction(transactionGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readTransaction(transactionGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
     * @summary Read transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTransactionRule(transactionRuleGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readTransactionRule(transactionRuleGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary Read user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readUser(userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).readUser(userGuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint will return a URL for an embeddable version of MX Connect.
     * @summary Request connect widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ConnectWidgetRequestBody} connectWidgetRequestBody Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    requestConnectWidgetURL(userGuid, connectWidgetRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).requestConnectWidgetURL(userGuid, connectWidgetRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint will generate an `oauth_window_uri` for the specified `member`.
     * @summary Request oauth window uri
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [clientRedirectUrl] A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
     * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
     * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
     * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    requestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).requestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, referralSource, skipAggregation, uiMessageWebviewUrlScheme, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
     * @summary Request widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
     * @param {string} [acceptLanguage] The desired language of the widget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    requestWidgetURL(userGuid, widgetRequestBody, acceptLanguage, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).requestWidgetURL(userGuid, widgetRequestBody, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
     * @summary Resume aggregation
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    resumeAggregation(memberGuid, userGuid, memberResumeRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).resumeAggregation(memberGuid, userGuid, memberResumeRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to update certain attributes of an `account` resource.
     * @summary Update account by member
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the attributes of a custom category according to its unique GUID.
     * @summary Update category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateCategory(categoryGuid, userGuid, categoryUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateCategory(categoryGuid, userGuid, categoryUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
     * @summary Update managed account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `member`.
     * @summary Update managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
     * @summary Update managed transaction
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
     * @summary Update member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateMember(memberGuid, userGuid, memberUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateMember(memberGuid, userGuid, memberUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the name of a specific tag according to its unique GUID.
     * @summary Update tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTag(tagGuid, userGuid, tagUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateTag(tagGuid, userGuid, tagUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update a tagging.
     * @summary Update tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTagging(taggingGuid, userGuid, taggingUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateTagging(taggingGuid, userGuid, taggingUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
     * @summary Update transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
     * @summary Update transaction_rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to update the attributes of the specified user.
     * @summary Update user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateUser(userGuid, userUpdateRequestBody, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).updateUser(userGuid, userUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The verify endpoint begins a verification process for a member.
     * @summary Verify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    verifyMember(memberGuid, userGuid, options) {
        return (0, exports.MxPlatformApiFp)(this.configuration).verifyMember(memberGuid, userGuid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MxPlatformApi = MxPlatformApi;
